buildscript {
	ext {
		angularDir = "$projectDir/src/main/angular"
	}
}

plugins {
	id "com.gorylenko.gradle-git-properties" version "1.5.2"
	id "com.moowork.node" version "1.2.0"
	id "com.palantir.git-version" version "0.11.0"
	id "jp.classmethod.aws" version "0.38"
	id "org.ajoberstar.grgit" version "2.3.0"
	id "org.springframework.boot" version "2.0.5.RELEASE"
}

apply plugin: "java"
apply plugin: "com.moowork.node"
apply plugin: "io.spring.dependency-management"
apply plugin: "jp.classmethod.aws.beanstalk"
apply plugin: "jp.classmethod.aws"

group = "com.findcheeseheads"
version gitVersion()
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
}

dependencies {
	implementation("com.mashape.unirest:unirest-java:1.4.9")
	implementation("com.sun.xml.bind:jaxb-core:2.2.11")
	implementation("com.sun.xml.bind:jaxb-impl:2.2.11")
	implementation("javax.activation:activation:1.1.1")
	implementation("javax.xml.bind:jaxb-api:2.2.11")
    implementation("mysql:mysql-connector-java")
	implementation("org.springframework.boot:spring-boot-starter-actuator")
	implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")

	testImplementation("org.springframework.boot:spring-boot-starter-test")
	testImplementation("org.springframework.security:spring-security-test")
}

aws {
	profileName = "default"
	region = "us-west-2"
}

beanstalk {
	appName "FindCheeseheads.com"
	appDesc ""

	version {
		label = "${project.name}-${version}"
		description = "${project.name} v${version}"
		bucket = "elasticbeanstalk-${aws.region}-${aws.accountId}"
		key = "${beanstalk.appName}/${project.name}-${project.version}.zip"
	}

	environment {
		envName = "findcheeseheads-prod"
	}
}

gitProperties {
	dateFormat = "yyyy-MM-dd'T'HH:mmZ"
	dateFormatTimeZone = "PST"
	gitPropertiesDir = "${project.rootDir}/src/main/resources"
}

processResources {
	dependsOn "copyAngular"
}

springBoot {
	buildInfo()
}


task buildAngular(type:Exec) {
	dependsOn "npmInstall"
	workingDir "${angularDir}"
	inputs.dir "${angularDir}"
	outputs.dir "${buildDir}/web"
	// Add task to the standard build group
	group = BasePlugin.BUILD_GROUP
	// ng doesn"t exist as a file in windows -> ng.cmd
	if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")){
		commandLine "ng.cmd", "build", "--prod"
	} else {
		commandLine "ng", "build", "--prod"
	}
}

task copyAngular(type: Copy) {
	dependsOn "buildAngular"
	doFirst {
		mkdir "${buildDir}/resources/main/static/"
	}

	from "${buildDir}/web"
	into "${buildDir}/resources/main/static/"
}

task createEbBundleResources(type: Copy) {
	from "src/main/eb"
	into "build/eb-bundle"
}

task createEbBundle(type: Zip, dependsOn: [bootJar, createEbBundleResources]) {
	archiveName = jar.archiveName.substring(0, jar.archiveName.length() - 4) + "-eb.zip"
	from "build/eb-bundle"
	from (jar.archivePath) {
		rename { "application.jar" }
	}
}

task uploadEbBundle(type: jp.classmethod.aws.gradle.s3.AmazonS3FileUploadTask, dependsOn: createEbBundle) {
	group "AWS"
	description "Upload ${project.name} application bundle file to S3."

	bucketName "elasticbeanstalk-${aws.region}-${aws.accountId}"
	key "${beanstalk.appName}/${project.name}-${project.version}.zip"
	file project.createEbBundle.archivePath
	overwrite project.version.endsWith("-SNAPSHOT")

	doLast {
		println("Uploaded ${beanstalk.version.key}")
	}
}

awsEbCreateApplicationVersion.dependsOn uploadEbBundle